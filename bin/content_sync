#!/usr/bin/env ruby

# performs contents sync.

require 'content_sync/content_sync'
require 'log'
require 'params'

Params.init ARGV
Log.init

Thread.abort_on_exception = true  # TODO (genadyp) should be treated globally? by param for example.

def handle_program_termination(exception)
  #Write exception message to console
  message = "\nInterrupt or Exit happened in server:''.\n" +
      "Exception type:'#{exception.class}'.\n" +
      "Exception message:'#{exception.message}'.\n" +
      "Stopping process.\n" +
      "Backtrace:\n#{exception.backtrace.join("\n")}"
  puts(message)

  # Block force write to file resolving Issue 217 https://github.com/bbfsdev/bbfs/issues/217
  # force write content data to file
  #if $local_content_data
  # puts("\nForce writing local content data to #{Params['local_content_data_path']}.")
  #$local_content_data.to_file($tmp_content_data_file)
  #File.rename($tmp_content_data_file, Params['local_content_data_path'])
  #end

  #Write exception message to log and mail(if enabled)
  Log.error(message)
end

begin
  ContentSync.sync_all()
rescue SystemExit, SignalException => exception
  # TODO (genadyp) do we need to trap signals by types?
  handle_program_termination(exception)
  Log.flush
  exit
rescue Exception => exception
  handle_program_termination(exception)
  Log.flush
  exit
end

