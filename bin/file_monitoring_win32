#! /usr/bin/ruby
# Monitors add/remove/update of files and directories.
# File monitoring checks file modification date and size.
# If one of the above changed, the file considered as changed.
# A log file is written with all incremental changes of files.
#
# Install:
# gem build file_monitoring.gemspec
# gem install file_monitoring
#
# Run: start_file_monitoring_win32 [conf_file] [app suffix]
# Examples:
# start_file_monitoring_win32
# or
# start_file_monitoring_win32 conf.yml
# or
# start_file_monitoring_win32 conf.yml my_instance
#
# Note that scan period is in seconds.
# cong.yml structure:
# log_path: ~/my_monitor_log_dir/log
# paths:
# - path: /a_path/one
#   scan_period: 100
#   stable_state: 5
# - path: /a_path/two
#   scan_period: 600
#   stable_state: 3
#
# To stop the service from command line: sc stop "#{service_name}}"
# To delete the service from command line: sc delete "#{service_name}}"

require 'rubygems'
require 'win32/service'
require 'win32/daemon'

require 'log'

include Win32

class String; def to_dos() self.tr('/','\\') end end
class String; def from_dos() self.tr('\\','/') end end

SERVICE_NAME = 'file monitoring' # service name will be displayed in services table and used to control the service
SERVICE_EXE = 'lib/file_monitoring/daemon_win32.rb' # name of the file that contains service code

# get ruby interpreter path. need it to compose a binary path name
require 'rbconfig'
RUBY_INTERPRETER_PATH = File.join(Config::CONFIG["bindir"],
                                  Config::CONFIG["RUBY_INSTALL_NAME"] +
                                      Config::CONFIG["EXEEXT"]).to_dos

bin_dir = "#{File.dirname(File.expand_path(__FILE__))}".to_dos
root_dir = "#{File.dirname(bin_dir)}".to_dos
lib_dir = File.join(root_dir, "lib").to_dos
bin_full_path = File.join(root_dir, SERVICE_EXE).to_dos

ARGV[0] = (ARGV.length > 0 ? "#{ARGV[0]}" : '~/.bbfs/etc/file_monitoring.yml')
ARGV[0] = File.expand_path(ARGV[0])

daemon_suffix = (ARGV.length > 1 ? '_' + ARGV[1] : '')

argv = ARGV.join(' ')

binary_path = RUBY_INTERPRETER_PATH + " -C " + lib_dir + " #{bin_full_path} #{argv}"

service_name = SERVICE_NAME + daemon_suffix

begin
# Create a new service
  Service.create({
                     :service_name => service_name,
                     :service_type => Service::WIN32_OWN_PROCESS,
                     :description => 'File monitoring service',
                     :start_type => Service::AUTO_START,
                     :error_control => Service::ERROR_NORMAL,
                     :binary_path_name => binary_path,
                     :load_order_group => 'Network',
                     :dependencies => ['W32Time','Schedule'],
                     :display_name => service_name
                 })

  Service.start(service_name)
rescue Exception => err
  Log.info " ***Daemon failure #{Time.now} err=#{err}"
  raise
end