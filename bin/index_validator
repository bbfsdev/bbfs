#!/usr/bin/env ruby

# This script validates index files.
# There are two levels of validation:
#   shallow - Tests instances for file existence and file attributes. Quick. Is a default.
#   deep - In addition to shallow recalculates hash sum. Can take more time.
#
# Parameters:
#   local_index - Path to index file that consists data about local files (located on the same device).
#   remote_index - Path to index file that consists data about remote files.
#   instance_check_level - Level of instance validation (shallow/deep), see explanations above.
#
# Currently implemented functionality:
#   1. Validation of local index file that consists content/instance data for files located on the same
#   device
#   Example of running:
#     index_validator --local_index=$BBFS_INDEX
#     index_validator --local_index=$BBFS_INDEX --instance_check_level='deep'
#   2. Validation that every content in the remote index has valid instance according to local index.
#   Local instances corresponding to remote contents will be verified against file system.
#   Example of running:
#     index_validator --remote_index=$BACKUP/remote/master.data --local_index=$BBFS_INDEX
#     index_validator --remote_index=$BACKUP/remote/master.data --local_index=$BBFS_INDEX --instance_check_level='deep'

# TODO test
# TODO help/usage should be printed on demand or when incorrectly used
 
require 'params'
require 'log'
require 'content_data'
require 'validations/index_validations'

Params.path('local_index', 'not set', 'Path to index file that consists data about local files (located on the same device)')
Params.path('remote_index', 'not set', 'Path to index file that consists data about remote files')

Params.init ARGV
Log.init

# TODO more easy way to define in what mode script should be run
# TODO more easy way to define whether parameter was set
def run
  if File.file?(Params['remote_index']) && File.file?(Params['local_index'])
    remote_index_validation
  elsif File.file?(Params['local_index']) && !File.exists?(Params['remote_index'])
    local_index_validation
  else
    err_msg = "Incorrect input: parameters missing"
    puts err_msg
    Log.error err_msg
    Log.flush
    exit 1
  end
end

def local_index_validation
  index = ContentData::ContentData.new
  index.from_file(Params['local_index'])

  begin  
    if index.validate
      valid_msg = "#{Params['local_index']} is valid"
      Log.info valid_msg
      puts valid_msg
    else
      invalid_msg = "#{Params['local_index']} has problems.\n"\
        "For more information see log #{Params['log_file_name']}"
      Log.error invalid_msg
      puts invalid_msg
    end
  rescue ArgumentError => err
    puts err.message
    Log.error err.message
    Log.debug1 'Backtrace: '
    err.backtrace.each { |a| Log.debug1 a } 
    Log.flush
    exit 1
  end
end 

def remote_index_validation
  local_index = ContentData::ContentData.new
  local_index.from_file(Params['local_index'])
  remote_index = ContentData::ContentData.new
  remote_index.from_file(Params['remote_index'])

  begin
    if Validations::IndexValidations.validate_remote_index remote_index, local_index
      valid_msg = "All contents from #{Params['remote_index']} have valid instances on " \
        "#{Params['local_index']}" 
      Log.info valid_msg
      puts valid_msg
    else
      invalid_msg = "#{Params['remote_index']} has contents absent or without valid instances on "\
        "local index #{Params['local_index']}\n"\
        "For more information see log #{Params['log_file_name']}."
      Log.error invalid_msg
      puts invalid_msg
    end
  rescue ArgumentError => err
    puts err.message
    Log.error err.message
    Log.debug1 'Backtrace:'
    err.backtrace.each { |a| Log.debug1 a } 
    Log.flush
    exit 1
  end
end

# starts here
run
Log.flush

