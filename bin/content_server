#!/usr/bin/env ruby

# Runs content server. This server monitors a set of directories (blobs/patterns).
# The files in those directories are indexed (calculating their SHA1).
# Each unique content is backed up to the remote (backup) server.

require 'content_server'  #todo: yarondbb need it?
require 'content_server/content_server'  # specific content server impl
require 'content_server/server'  # shared file between content\backup
require 'log'
require 'params'
require 'run_in_background'

Params.init ARGV
Log.init
ContentServer.init_globals

Thread.abort_on_exception = true  # TODO (genadyp) should be treated globally? by param for example.

retries = 0  # number of retries to run a server

begin
  RunInBackground.run { ContentServer.run_content_server }
rescue SystemExit, SignalException => exception
  # TODO (genadyp) do we need to trap signals by types?
  ContentServer.handle_program_termination(exception)
  Log.flush
  exit
rescue Exception => exception
  ContentServer.handle_program_termination(exception)
  if retries > 0
    Log.debug1("Restarting (retries:#{retries}).")
  else
    Log.debug1("Exiting...")
    Log.flush
  end
  retries -= 1
end while retries >= 0
