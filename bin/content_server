#!/usr/bin/env ruby

# Runs content server. This server monitors a set of directories (blobs/patterns).
# The files in those directories are indexed (calculating their SHA1).
# Each unique content is backed up to the remote (backup) server.

require 'log'
require 'params'
require 'run_in_background'
require 'content_server'

Params.init ARGV
Log.init

Thread.abort_on_exception = true  # TODO (genadyp) should be treated globally? by param for example.

retries = 0  # number of retries to run a server

begin
  RunInBackground.run { ContentServer.run_content_server }
rescue SystemExit, SignalException => exc
  # TODO (genadyp) do we need to trap signals by types?
  #force dump of content data to file
  puts("Interrupt or Exit happened in #{Params['service_name']} server: #{exc.class}, " +
           "stopping process.\nBacktrace:\n#{exc.backtrace.join("\n")}")
  puts("Force writing local content data to #{Params['local_content_data_path']}.")
  ContentServer::local_dynamic_content_data.last_content_data.to_file(ContentServer::tmp_content_data_file)
  sleep(0.1)  # Added to prevent mv access issue
  ::FileUtils.mv(ContentServer::tmp_content_data_file, Params['local_content_data_path'])

  Log.error("Interrupt or Exit happened in #{Params['service_name']} server: #{exc.class}, " +
            "stopping process.\nBacktrace:\n#{exc.backtrace.join("\n")}")
  Log.flush
  exit
rescue Exception => exc
  puts("Exception happened in #{Params['service_name']} server: #{exc.class}:#{exc.message}\nBacktrace:\n#{exc.backtrace.join("\n")}")
  puts("Force writing local content data to #{Params['local_content_data_path']}.")
  ContentServer::local_dynamic_content_data.last_content_data.to_file(ContentServer::tmp_content_data_file)
  sleep(0.1)  # Added to prevent mv access issue
  ::FileUtils.mv(ContentServer::tmp_content_data_file, Params['local_content_data_path'])

  Log.error("Exception happened in #{Params['service_name']} server: #{exc.class}:#{exc.message}\nBacktrace:\n#{exc.backtrace.join("\n")}")
  if retries > 0
    Log.debug1("Restarting (retries:#{retries}).")
  else
    Log.debug1("Exiting...")
    Log.flush
  end
  retries -= 1
end while retries >= 0
