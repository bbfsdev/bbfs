#!/usr/bin/env ruby

# Runs backup server. This server monitors a set of directories (blobs/patterns).
# The files in those directories are indexed (calculating their SHA1).
# A remote server copies new/changed files in the backup server. The backup server
# index those new files too and send the content data (their SHA1 to the original server).

# NOTE this file mainly is a copy of content_server

require 'log'
require 'params'
require 'run_in_background'
require 'content_server'

Params.init ARGV
Log.init

Thread.abort_on_exception = true  # TODO (genadyp) should be treated globally? by param for example.

retries = 0  # number of retries to run a server

begin
  RunInBackground.run { ContentServer.run_backup_server }
rescue SystemExit, SignalException => exc
  # TODO (genadyp) do we need to trap signals by types?
  puts("Interrupt or Exit happened in #{Params['service_name']} server: #{exc.class}, " +
                "stopping process.\nBacktrace:\n#{exc.backtrace.join("\n")}")
  Log.error("Interrupt or Exit happened in #{Params['service_name']} server: #{exc.class}, " +
            "stopping process.\nBacktrace:\n#{exc.backtrace.join("\n")}")
  Log.flush
  exit
rescue Exception => exc
  puts("Exception happened in #{Params['service_name']} server: #{exc.class}:#{exc.message}\nBacktrace:\n#{exc.backtrace.join("\n")}")
  Log.error("Exception happened in #{Params['service_name']} server: #{exc.class}:#{exc.message}\nBacktrace:\n#{exc.backtrace.join("\n")}")
  if retries > 0
    Log.debug1("Restarting (retries:#{retries}).")
  else
    Log.debug1("Exiting...")
    Log.flush
  end
  retries -= 1
end while retries >= 0
