Big brother file system (distributed file system).
--------------------------------------------------

A. Backup system, general workflow:

    1. Content server monitors a set of directories (blobs/patterns).
    2. The files in those directories are indexed (calculating their SHA1/file content
       fingerprint).
    3. Each unique content is backed up to the remote (backup) server.
    4. The backup server also monitors a set of directories (blobs/patterns).
    5. The files in those directories are also indexed.
    6. The backup server copies new/changed files from the content server.
    7. The backup server index those new files too and send the content data (their
       SHA1 to the original server).

How to install and run:
-----------------------
A1) Installation of BBFS runtime:
  1. Download and install ruby.
  2. Download and install gem.
  3. From command line: gem install content_server
A2) Installation of BBFS development kit:
  1. Download and install git.
  2. Download and install ruby.
  3. Download and unpack and install DevKit (Windows). Note that after unpacking there
     are installation instructions at
     https://github.com/oneclick/rubyinstaller/wiki/Development-Kit.
  4. Mac (only) users will have to install XCode for gcc compiler.
     Run in command prompt (Windows users should run in Git Bash):
  5. git clone https://github.com/kolmanv/bbfs.git
  6. cd bbfs
  7. gem install bundler
  8. bundle install
  9. rake  # This will run all project tests and specs.
  10. You are done, you can start coding on the project.

B) (Optional) Recommended for development kit:
  1. Download and install smartgit.
  2. Download and install Ruby IDE (for example RubyMine).

C) Preparing configuration files:
 	1. Prepare two monitoring yml files. Each server, i.e., content server and
 	   backup server needs a monitoring configuration file.

    2. Create configuration file for content server which should be located
       in ~/.bbfs/etc/file_monitoring.yml
       cat > file_monitoring.yml    #  to create a file  CNTRL-D to save
       File content (number of spaces is important, read YML format):

paths:
   - path: /home/user_name/.bbfs/test_files  # <=== replace with your local dir.
     scan_period: 1
     stable_state: 5

    3. Create configuration file for backup server which should be located
       in ~/.bbfs/etc/backup_file_monitoring.yml
       File content:

paths:
   - path:  /home/user_name/.bbfs/backup_data  # <=== replace with your local dir.
     scan_period: 1
     stable_state: 5

    4. Explanation about file_monitoring.yml and backup_file_monitoring.yml
       configuration files:

    	"path:" - say to program which folder to scan recursively in order to find
    	          new/changed files and folders.
    	"scan_period:" - how much time in seconds passed before two consecutive scans
    	                 for files and directories.
		"stable_state:" - how many scan_period passed until the file is considered
		                  stable.

D) Run content server and backup server:

	1. run content server
		ruby -Ilib bin/content_server --remote_server="backup_address"

	2. Run backup server (after content server is running):
		ruby -Ilib bin/backup_server --remote_server="content_address" --backup_destination_folder=/home/user_name/.bbfs/backup_data


    3. where user_name is your user name at linux.
       where backup_address and content_address is address of backup and content
       servers.

    notes: when you not use --remote_server localhost used as default address.
           thats mean that content and backup servers run on the same physical
           machine.

  Servers can be run in background (as Linux daemons or Windows services)
  By default servers run in a foreground.
  To start daemon/service add command line parameters:
    --bg_command=start --service_name=<default is a server's file name>
  To stop daemon/service - server should be run with following parameters:
    --bg_command=delete --service_name=<same name as was provided when starting service>
  
  Background notes:
  1. No multiple instances with the same name.
  2. Linux note: when daemon wasn't stoped in a normal way (by delete command), then it's pid file
     (<service_name>.pid) remains in the pid directory (default is: $HOME/.bbfs/pids) and system's
     functioning is undefined. It's a user's responsibility to remove such an obsolete files.
  More informations regarding background functionality as well as instructions how to use this
  option on Windows7 can be found online:
  http://rubydoc.info/gems/run_in_background/0.0.9/BBFS/RunInBackground
       
E) Detailed description of applications (using parameters and etc)
   in order to see help run:
   ruby -Ilib bin/content_server --help
   TODO continue from here

How to contribute to this project:
----------------------------------
A) Clone the project:
  > git@github.com:kolmanv/bbfs.git
  > cd bbfs
B) Master is sarced! Note this, this is important : you will never commit or merge
   into master branch. Master is master. You will use to get the changes, and only
   that.
C) Topic branch:
   So you want to fix a bug, add a great feature ? No problem, you create a new branch
   (because remember you will never commit or merge into your master branch!) :
   bbfs> git checkout -b feature-world-conquest
   Then you work in this branch, commit when you want, revert, etc. In short: you
   work. If you work on two different topics (add the world conquest feature and fix
   a bug) you create a topic branch for each. Don't forget to test your changes!
D) Fetch master: It's been a while you work on different topics. You want to test your
   changes with last changes :
   bbfs> git merge master
   Resolve conflicts if any, and try.
E) OK, it works. Now, you want to publish your changes to master branch. You go to
   github at: https://github.com/kolmanv/bbfs,
   then for each new topic branches, you select it, then do a pull request. We'll
   review the code, eventually merge it in the master branch. Then you'll be able to
   drop your old topic branches.
