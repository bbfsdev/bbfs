BBFS - Backup system, general workflow:

Content server monitors a set of local directories.
  The files in those  directories are indexed (calculating their SHA1).
  The indexed SHA1 (content hash) is stored in a file called content data.
  When requested content data is sent to backup server.
  When requested , files are sent to backup server for backup.

Backup server requests new/changed contents (files) from the Content server.
  Backup files (copied from content server) are stored in a destination dir which is also monitored, indexed and stored in a file (backup content data).
  The destination dir structure is:
    backup/destination/tmp - used to temporary files while copying from content server.
    backup/destination/remote/ - content data received from servers.
    backup/destination/* - rest of dirs used to stored backup files.
  Each period of time (configurable), sends request to content server to get its latest content data.
  Each period of time (configurable), performs a sync check between content server and itself.
  If needed, requests and copy required files from content server to backup (store in destination dir).

Installing:
  Install Ruby 1.9.3
  Instal RubyGems
  Install application gems:
    gem install content_server
      (This can take a while till all gems are installed.)

Running:
1. Preparing content server and backup server configuration files (see Appendix examples).
2. Run content server: content_server --conf_file=path_to_configuration_file
3. Run backup server:  backup_server --conf_file=path_to_configuration_file
Uninstalling all gems
  Unix:
    for x in gem list --no-versions; do gem uninstall $x -a -x -I; done
  Windows:
    ruby -e "gem list.split(/$/).each { |line| puts gem uninstall -Iax #{line.split(' ')[0]} unless line.empty? }"
  Note:
  Be aware to use it when some other programs run on ruby and use different gems. If this is a situation remove gems manually and don’t remove ruby.

Validation:
This release was manually tested. The test included backing up content server during a period of one week. During the week, files were generated randomly on content server machine. 14K content instances (files) were generated, which actually are 5K different contents of total size of 72MB to backup servers. The test was performed on 2 linux machines. During validation each 6 hours, backup server compared successfully files against the expected files.

Documentation:
  Can be found at:
    https://github.com/bbfsdev/bbfs/wiki/Documentation

Appendix (configuration files):
1. content_server application configuration file (example):
############# START OF FILE #################
# Content server parameters
local_files_port: 4444 # TCP/IP port to start server to send files to backup.
local_content_data_port: 3333 # TCP/IP port to start server to send content data upon request from client.
#content data file, i.e., state of content server.
local_content_data_path: '~/.bbfs/var/content.data' # File to store content data
#Logging options
log_write_to_file: true # Will print all log messages to file
log_file_name: '~/.bbfs/log/content_server.log4r'
log_write_to_console: true # Will print all log messages to standard output. Default is false.
log_write_to_email: true # Will print errors to mail on system crush only . Default is false.
# Verbosity of logging. 0 will log INFO messages. 3 will print ALL debug messages as well.
log_debug_level: 0
from_email: 'put your email address here..'
# Log to email on system crush options
from_email: 'jhon.doe@gmail.com'  # user should change to real value
from_email_password: 'hihahu'  # user should change to real value
to_email: 'jhon.doe@gmail.com'  # user should change to real value
default_monitoring_log_path: '~/.bbfs/log/content_file_monitoring.log' # Log of file changes
# Paths to monitor\backup files from. All path files and recursive sub paths are used.
monitoring_paths:
  - path: '/home/jhon_doe/dir_to_backup'
    scan_period: 1 # Number of seconds before initiating another directory scan.
    stable_state: 5 # Number of scan times for a file to be unchanged before his state becomes stable.
  - path: 'path_2_to_monitor'
    scan_period: 1 # Number of seconds before initiating another directory scan.
    stable_state: 5 # Number of scan times for a file to be unchanged before his state becomes stable.
# … optional more paths here
# print all parameters to console at the beginning of execution log.
print_params_to_stdout: true
############# END OF FILE #################
Notes:
  User needs to change dummy values in the file example for parameters: monitoring_paths, from_email, and to_email.
  User can change other parameter according to the system characteristics (files size to backup, network speed etc..). Pls see more on this in documentation.

2. backup_server application configuration file (example):
############# START OF FILE #################
#Backup server parameters
content_server_hostname: 'localhost' # Default is nil
content_server_files_port: 4444 # TCP/IP port to start server to send files to backup.
# TCP/IP port to start server to send content data upon request from client.
content_server_data_port: 3333
#backup data file, i.e. state(index) of backup server destination folder.
local_content_data_path: '~/.bbfs/var/backup.data' # File to store content data
#Logging options
log_write_to_file: true # Will print all log messages to file
log_file_name: '~/.bbfs/log/backup_server.log4r'
log_write_to_console: true # Will print all log messages to standard output. Default is false.
log_write_to_email: true # Will print errors to mail on system crush only . Default is false.
# Verbosity of logging. 0 will log INFO messages. 3 will print ALL debug messages as well.
log_debug_level: 0
from_email: 'jhon.doe@gmail.com'  # user should change to real value
from_email_password: 'hihahu'  # user should change to real value
to_email: 'jhon.doe@gmail.com'  # user should change to real value
default_monitoring_log_path: '~/.bbfs/log/backup_file_monitoring.log' # Log of file changes
# Paths to monitor\backup files from. All path files and recursive sub paths are used.
monitoring_paths:
  - path: '/home/jhon_doe/destination_to_copy_backup_files'
    scan_period: 1 # Number of seconds before initiating another directory scan.
    stable_state: 5 # Number of scan times for a file to be unchanged before his state becomes stable.
#cycles of fetch period used by backup server to ping content server for its content
remote_content_save_timeout: 120
#Cycles where backup is checking if sync is required between remote and backup contents
backup_check_delay: 60
# print all parameters to console at the beginning of execution log.
print_params_to_stdout: true
############# END OF FILE #################
Notes:
  User needs to change dummy values in the file example for parameters: monitoring_paths, from_email, and to_email.
  User can change other parameter according to the system characteristics (files size to backup, network speed etc..). Pls see more on this in documentation.

