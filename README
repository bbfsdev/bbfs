Big Brother File System (Distributed File System).
--------------------------------------------------

A. Backup system, general workflow:
-----------------------------------
    1. Content server monitors a set of local directories (blobs/patterns). The files in those
       directories are indexed (calculating their SHA1/file content fingerprint).
    2. Backup server also monitors a set of local directories (blobs/patterns). Files in those
       directories are also indexed.
    3. Backup server requests new/changed files from the Content server.

B. User Guide
-------------
This manual explain how to run BBFS backup from scratch. The BBFS program is application for
backing-up files. There are two application for BBFS system:
    1. backup_server is server run on machine where files is backed-up
    2. content_server is application that run on machine from where files are copied.
So you need to prepare two computers (it can be only one computer if you want the data to be backed
up to the same computer).

The BBFS system done on Ruby language so Ruby should be installed on both computers.

1. Installing Ruby, devkit (required by 'algorithms' gem and installed only on windows) and rubygems
    (if not installed):
	a. Check if Ruby and rubygems installed on you computer "ruby -v", "gem -v"
	b. Installing Ruby and gemspec
       On Windows: go to http://rubyinstaller.org/ and download and install Ruby.
       On Linux: sudo apt-get install ruby1.9.3
	c. Installing devkit (Windows only)
       On Windows: go to http://rubyinstaller.org/ and download devkit, follow instructions at
       https://github.com/oneclick/rubyinstaller/wiki/Development-Kit
       On Linux: no need todo it.

2. On content_server machine:
    a. Install Content server by 'gem install content_server'
    b. Create configuration file for content server which should be located in
       ~/.bbfs/etc/file_monitoring.yml
       the content of the file is:
------- begin of file_monitoring.yml --------
paths:
   - path: ~/.bbfs/test_files  # <=== replace with your local dir.
     scan_period: 1
     stable_state: 5
------- end of file_monitoring.yml --------
    c. run the content_server by running the following command:
    > content_server --remote_server=<backup_address>

3. On backup_server machine:
    a. Install Backup server by 'gem install content_data'
    b. Create configuration file for backup server which should be located
       in ~/.bbfs/etc/backup_file_monitoring.yml
       File content:
------- begin of backup_file_monitoring.yml --------
paths:
   - path:  ~/.bbfs/backup_data  # <=== replace with your local dir.
     scan_period: 1
     stable_state: 5
------- end of backup_file_monitoring.yml --------
    c. Run the Backup server by running the following command:
    > backup_server --remote_server=<content_server_address> --backup_destination_folder=~/.bbfs/backup_data

4. Explanation about file_monitoring.yml and backup_file_monitoring.yml
    configuration files:

    "path:" - say to program which folder to scan recursively in order to find
              new/changed files and folders.
    "scan_period:" - how much time in seconds passed before two consecutive scans
                     for files and directories.
	"stable_state:" - how many scan_period passed until the file is considered
	                  stable.

Uninstalling:
1. uninstall all gems by: 'gem list | cut -d" " -f1 | xargs gem uninstall -aIx'
2. uninstall Ruby (from ruby193/unins000.exe) and delete ruby193 folder.


C. Developers Guide
-------------------

A1) Installation of BBFS runtime:
  1. Download and install Ruby.
  2. Download and install gem.
  3. From command line: gem install content_server
A2) Installation of BBFS development kit:
  1. Download and install git.
  2. Download and install Ruby.
  3. Download and unpack and install DevKit (Windows). Note that after unpacking there
     are installation instructions at
     https://github.com/oneclick/rubyinstaller/wiki/Development-Kit.
  4. Mac (only) users will have to install XCode for gcc compiler.
     Run in command prompt (Windows users should run in Git Bash):
  5. git clone https://github.com/kolmanv/bbfs.git
  6. cd bbfs
  7. gem install bundler
  8. bundle install
  9. rake  # This will run all project tests and specs.
  10. You are done, you can start coding on the project.

B) (Optional) Recommended for development kit:
  1. Download and install smartgit.
  2. Download and install Ruby IDE (for example RubyMine).

C) Preparing configuration files:
 	1. Prepare two monitoring yml files. Each server, i.e., content server and
 	   backup server needs a monitoring configuration file.

    2. Create configuration file for content server which should be located
       in ~/.bbfs/etc/file_monitoring.yml
       cat > file_monitoring.yml    #  to create a file  CNTRL-D to save
       File content (number of spaces is important, read YML format):

paths:
   - path: /home/user_name/.bbfs/test_files  # <=== replace with your local dir.
     scan_period: 1
     stable_state: 5

    3. Create configuration file for backup server which should be located
       in ~/.bbfs/etc/backup_file_monitoring.yml
       File content:

paths:
   - path:  /home/user_name/.bbfs/backup_data  # <=== replace with your local dir.
     scan_period: 1
     stable_state: 5

    4. Explanation about file_monitoring.yml and backup_file_monitoring.yml
       configuration files:

    	"path:" - say to program which folder to scan recursively in order to find
    	          new/changed files and folders.
    	"scan_period:" - how much time in seconds passed before two consecutive scans
    	                 for files and directories.
		"stable_state:" - how many scan_period passed until the file is considered
		                  stable.

D) Run content server and backup server:

	1. run content server
		ruby -Ilib bin/content_server --remote_server="backup_address"

	2. Run backup server (after content server is running):
		ruby -Ilib bin/backup_server --remote_server="content_address" --backup_destination_folder=/home/user_name/.bbfs/backup_data


    3. where user_name is your user name at linux.
       where backup_address and content_address is address of backup and content
       servers.

    notes: when you not use --remote_server localhost used as default address.
           thats mean that content and backup servers run on the same physical
           machine.

  Servers can be run in background (as Linux daemons or Windows services)
  By default servers run in a foreground.
  To start daemon/service add command line parameters:
    --bg_command=start --service_name=<default is a server's file name>
  To stop daemon/service - server should be run with following parameters:
    --bg_command=delete --service_name=<same name as was provided when starting service>
  
  Background notes:
  a) No multiple instances with the same name.
  b) Linux note: when daemon wasn't stoped in a normal way (by delete command), then it's pid file
     (<service_name>.pid) remains in the pid directory (default is: $HOME/.bbfs/pids) and system's
     functioning is undefined. It's a user's responsibility to remove such an obsolete files.
  More information regarding background functionality as well as instructions how to use this
  option on Windows7 can be found online:
  http://rubydoc.info/gems/run_in_background/0.0.9/BBFS/RunInBackground
       
E) Detailed description of applications (using parameters and etc)
   in order to see help run:
   ruby -Ilib bin/content_server --help
   TODO continue from here

How to contribute to this project:
----------------------------------
A) Clone the project:
  > git@github.com:kolmanv/bbfs.git
  > cd bbfs
B) Master is sarced! Note this, this is important : you will never commit or merge
   into master branch. Master is master. You will use to get the changes, and only
   that.
C) Topic branch:
   So you want to fix a bug, add a great feature ? No problem, you create a new branch
   (because remember you will never commit or merge into your master branch!) :
   bbfs> git checkout -b feature-world-conquest
   Then you work in this branch, commit when you want, revert, etc. In short: you
   work. If you work on two different topics (add the world conquest feature and fix
   a bug) you create a topic branch for each. Don't forget to test your changes!
D) Fetch master: It's been a while you work on different topics. You want to test your
   changes with last changes :
   bbfs> git merge master
   Resolve conflicts if any, and try.
E) OK, it works. Now, you want to publish your changes to master branch. You go to
   github at: https://github.com/kolmanv/bbfs,
   then for each new topic branches, you select it, then do a pull request. We'll
   review the code, eventually merge it in the master branch. Then you'll be able to
   drop your old topic branches.
